"use strict";

// --------------------- 4 nguy√™n t·∫Øc c∆° b·∫£n -------------------
// 1. Abstraction (Tr·ª´u t∆∞·ª£ng)
// - Tr·ª´u t∆∞·ª£ng l√† m·ªôt qu√° tr√¨nh ·∫©n c√°c chi ti·∫øt tri·ªÉn khai v√† ch·ªâ hi·ªÉn th·ªã ch·ª©c nƒÉng cho ng∆∞·ªùi d√πng.
// - Trong java -> t·∫°o l·ªõp abstract -> k·∫ø th·ª´a l·ªõp n√†y -> L·ªõp n√†o ƒë√≥ k·∫ø th·ª´a l·ªõp tr·ª´u t∆∞·ª£ng th√¨ l·ªõp con ƒë√≥ b·∫Øt bu·ªôc ph·∫£i override l·∫°i n·ªôi dung t·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng c√≥ trong l·ªõp ƒë√≥.
// 2. Encapsulation (ƒê√≥ng g√≥i)
// - Gi·ªØ c√°c thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c ri√™ng t∆∞ b√™n trong l·ªõp.
// 3. Inheritance  (K·∫ø th·ª´a)
// - Cho ph√©p x√¢y d·ª±ng m·ªôt l·ªõp m·ªõi d·ª±a tr√™n c√°c ƒë·ªãnh nghƒ©a c·ªßa l·ªõp ƒë√£ c√≥ (L·ªõp cha c√≥ th·ªÉ chia s·∫Ω d·ªØ li·ªáu v√† ph∆∞∆°ng th·ª©c cho c√°c l·ªõp con).
// 4. Polymorphism (ƒêa h√¨nh)
// -M·ªôt l·ªõp con c√≥ th·ªÉ ghi ƒë√® l√™n m·ªôt ph∆∞∆°ng th·ª©c m√† n√≥ ƒë∆∞·ª£c k·∫ø th·ª´a t·ª´ m·ªôt l·ªõp cha

// ------------------------ Clasical OOP: CLASSES --------------
// Class -> instance
// 1. Objects(instances) ƒë∆∞·ª£c t·∫°o ra t·ª´ m·ªôt l·ªõp
// 2. Methods ƒë∆∞·ª£c sao ch√©p t·ª´ l·ªõp cho t·∫•t c·∫£ c√°c tr∆∞·ªùng h·ª£p.

//-------------------------- OOP trong JS ----------------------
// Prototype <- Object
// 1. K·∫ø th·ª´a nguy√™n m·∫´u: M·ªói ƒë·ªëi t∆∞·ª£ng ƒë·ªÅu li√™n k·∫øt v·ªõi m·ªôt ƒë·ªëi t∆∞·ª£ng nguy√™n m·∫´u nh·∫•t ƒë·ªãnh,
// c√≥ th·ªÉ s·ª≠ d·ª•ng properties v√† method ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a tr√™n nguy√™n m·∫´u ƒë√≥.
// 2. Methods ƒë∆∞·ª£c ·ªßy quy·ªÅn cho ƒë·ªëi t∆∞·ª£ng nguy√™n m·∫´u(prototype) ƒë∆∞·ª£c li√™n k·∫øt.( # kh√°c v·ªõi class oop c·ªï ƒëi·ªÉn)

// Ex:
// const arr = [1, 2, 3];
// console.dir(arr);
//Khi t·∫°o m·ªôt m·∫£ng arr th√¨ arr ƒë∆∞·ª£c li√™n k·∫øt v·ªõi Array.prototype
// -> do ƒë√≥ n√≥ c√≥ quy·ªÅn truy c·∫≠p v√†o c√°c methods ƒë∆∞·ª£c x√°c ƒë·ªãnh tr√™n Array.prototype
// => Methods kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a tr√™n ƒë·ªëi t∆∞·ª£ng arr m√† tr√™n prototype c·ªßa n√≥.

// ---- T·∫°o prototype , Li√™n k·∫øt object ƒë·∫øn prototype

// ------------------------------ 3 c√°ch t·∫°o ----------------------------
// 1. constructor function
// - ƒê√¢y l√† c√°ch c√°c ƒë·ªëi t∆∞·ª£ng t√≠ch h·ª£p s·∫µn nh∆∞ Arrays, Maps ho·∫∑c Sets th·ª±c s·ª± ƒë∆∞·ª£c tri·ªÉn khai.
// 2. ES6 classes
// - C√∫ ph√°p hi·ªán ƒë·∫°i h∆°n
// - Tuy nhi√™n ƒë·∫±ng sau c√°c l·ªõp ES6 ho·∫°t ƒë·ªông ch√≠nh x√°c nh∆∞ khi t·∫°o b·∫±ng constructor function
// 3. Object.create()
// - C√°ch d·ªÖ nh·∫•t v√† ƒë∆°n gi·∫£n nh·∫•t ƒë·ªÉ li√™n k·∫øt m·ªôt ƒë·ªëi t∆∞·ª£ng v·ªõi m·ªôt ƒë·ªëi t∆∞·ª£ng nguy√™n m·∫´u

// C√°ch 1:
console.log("------------ constructor function -------------");
const Person = function (firstName, birthYear) {
    this.firstName = firstName;
    this.birthYear = 2000;

    // Kh√¥ng n√™n t·∫°o m·ªôt method b√™n trong constructor function(V√¨ n·∫øu khi t·∫°o m·ªôt instance n√≥ s·∫Ω ƒë·ªãnh nghƒ©a th√™m c√°i method calcAge n√†y trong instance n·ªØa)
    // this.calcAge = function () {
    //     console.log(2022 - this.birthYear);
    // };
};
// -> n√™n d√πng prototype th√™m m·ªôt method
Person.prototype.calcAge = function () {
    console.log(2022 - this.birthYear);
};

//static method
Person.hey = function () {
    console.log("This is Static method üëã");
    console.dir(this);
};
// Person.hey();

const hiep = new Person("Hiep", 2000);
// L√∫c n√†y:
// 1. M·ªôt {} ƒë∆∞·ª£c t·∫°o
// 2. H√†m ƒë∆∞·ª£c g·ªçi, this = {}
// 3. {} li√™n k·∫øt v·ªõi prototype c·ªßa Person
// 4. H√†m t·ª± ƒë·ªông return {}

// Prototype chain
console.log(hiep);
console.log(hiep.__proto__); //ch√≠nh l√† Person.prototype
console.log(hiep.__proto__.__proto__); // ch√≠nh l√† Object.prototype
console.log(hiep.__proto__.__proto__.__proto__); // null

// Nguy√™n t·∫Øc ho·∫°t ƒë·ªông
// Vd: hiep.hasOwnProperty("firstName")
// 1. T√¨m ph∆∞∆°ng th·ª©c n√†y tr√™n ch√≠nh ƒë·ªëi t∆∞·ª£ng hiep -> ko c√≥
// 2. Theo c√°ch th·ª©c ho·∫°t ƒë·ªông Prototype chain, n√≥ nh√¨n v√†o prototype c·ªßa n√≥ l√† Person.prototype -> ko c√≥
// 3. N√≥ ti·∫øp t·ª•c nh√¨n v√†o Object.prototype -> c√≥

// Ki·ªÉm tra
// console.log(hiep instanceof Person); // #true ki·ªÉm tra hiep ph·∫£i l√† instance c·ªßa Person
// console.log(Person.prototype.isPrototypeOf(hiep)); // #true ki·ªÉm tra hiep ph·∫£i l√† prototype c·ªßa Person
// console.log(hiep.hasOwnProperty("firstName")); //#true ki·ªÉm tra firstName c√≥ ph·∫£i l√† t√†i s·∫£n ri√™ng c·ªßa hiep kh√¥ng

// C√°ch 2:
console.log("------------ ESC Class -------------");
class PersonCl {
    constructor(firstName, birthYear) {
        (this.firstName = firstName), (this.birthYear = birthYear);
    }
    get birthYearFn() {
        return this.birthYear;
    }

    set birthYearFn(birthYear) {
        this.birthYear = birthYear;
    }
    calcAge() {
        console.log(2022 - this.birthYear);
    }

    // Static method: kh√¥ng n·∫±m tr√™n prototype, m√† n·∫±m trong PersonCl
    static hey() {
        console.log("This is Static method üëã");
        console.dir(this);
    }
}
PersonCl.prototype.greet = function () {
    console.log(`Hey ${this.firstName}`);
};

const hieu = new PersonCl("Hieu", 2000);
console.log(hieu);
hieu.birthYear = 2005; // set -> truy·ªÅn b·∫±ng c√°ch g√°n cho n√≥ gi√° tr·ªã
console.log(hieu.birthYear); // get
PersonCl.hey();

// C√°ch 3:
console.log("------------ Object.create() -------------");
// t·∫°o object b√¨nh th∆∞·ªùng
const PersonProto = {
    calcAge() {
        console.log(2022 - this.birthYear);
    },
    //T·ª± m√¨nh t·∫°o ra
    init(firstName, birthYear) {
        this.firstName = firstName;
        this.birthYear = birthYear;
    },
};
// T·∫°o b·∫±ng Object.create() -> t·ª± ƒë·ªông link object PersonProto th√†nh prototype cho vu
const vu = Object.create(PersonProto);
vu.init("Vu", 2000);
vu.calcAge();
console.log(vu);
console.log(vu.__proto__); // ch√≠nh l√† object PersonProto

//--------------------- K·∫ø th·ª´a - Constructor Functions --------------------

console.log(
    "-------------------K·∫ø th·ª´a classes: Constructor Functions------------"
);
// Ta k·∫ø th·ª´a Person ·ªü tr√™n
const Student = function (firstName, birthYear, course) {
    Person.call(this, firstName, birthYear);
    this.course = course;
};

// Linking prototypes
Student.prototype = Object.create(Person.prototype);

Student.prototype.introduce = function () {
    console.log(`My name is ${this.firstName} and I study ${this.course}`);
};

const mike = new Student("Mike", 2020, "Computer Science");
mike.introduce();
mike.calcAge();

console.log(mike);
console.log(mike.__proto__);
console.log(mike.__proto__.__proto__);

console.log(mike instanceof Student); //#true
console.log(mike instanceof Person); //#true
console.log(mike instanceof Object); //#true

Student.prototype.constructor = Student;
console.dir(Student.prototype.constructor);

//--------------------- K·∫ø th·ª´a - ES6 Classes --------------------
console.log("-------------------K·∫ø th·ª´a classes: ES6 Classes------------");
class StudentCl extends PersonCl {
    constructor(firstName, birthYear, course) {
        // Always needs to happen first!
        super(firstName, birthYear);
        this.course = course;
    }

    introduce() {
        console.log(`My name is ${this.firstName} and I study ${this.course}`);
    }

    //ghi ƒë√®
    calcAge() {
        console.log(
            `I'm ${
                2022 - this.birthYear
            } years old, but as a student I feel more like ${
                2022 - this.birthYear + 10
            }`
        );
    }
}

const martha = new StudentCl("Martha", 2000, "Computer Science");
console.log(martha);
martha.introduce();
martha.calcAge();

//--------------------- K·∫ø th·ª´a - Object.create --------------------
console.log("-------------------K·∫ø th·ª´a classes: Object.create------------");

const StudentProto = Object.create(PersonProto);
StudentProto.init = function (firstName, birthYear, course) {
    PersonProto.init.call(this, firstName, birthYear);
    this.course = course;
};

StudentProto.introduce = function () {
    console.log(`My name is ${this.firstName} and I study ${this.course}`);
};

const jay = Object.create(StudentProto);
jay.init("Jay", 2010, "Computer Science");
jay.introduce();
jay.calcAge();

// --------------------- ƒê√≥ng g√≥i ----------------------------------
console.log("-------------------ƒê√≥ng g√≥i------------");

// 1) Public fields
// 2) Private fields
// 3) Public methods
// 4) Private methods
// (there is also the static version)

class Account {
    // 1) Public fields (instances)
    locale = navigator.language;

    // 2) Private fields (instances)
    #movements = [];
    #pin;

    constructor(owner, currency, pin) {
        this.owner = owner;
        this.currency = currency;
        this.#pin = pin;

        // Protected property
        // this._movements = [];
        // this.locale = navigator.language;

        console.log(`Thanks for opening an account, ${owner}`);
    }

    // 3) Public methods

    // Public interface
    getMovements() {
        return this.#movements;
    }

    deposit(val) {
        this.#movements.push(val);
        return this;
    }

    withdraw(val) {
        this.deposit(-val);
        return this;
    }

    requestLoan(val) {
        // if (this.#approveLoan(val)) {
        if (this._approveLoan(val)) {
            this.deposit(val);
            console.log(`Loan approved`);
            return this;
        }
    }

    // ch·ªâ truy c·∫≠p t·ª´ class
    static helper() {
        console.log("Helper");
    }

    // 4) Private methods
    // #approveLoan(val) {
    _approveLoan(val) {
        return true;
    }
}

const acc1 = new Account("Hiep", "VND", 1111);
console.log(acc1);

// acc1._movements.push(250);
// acc1._movements.push(-140);
// acc1.approveLoan(1000);

acc1.deposit(250);
acc1.withdraw(140);
acc1.requestLoan(1000);
console.log(acc1.getMovements());
console.log(acc1);
Account.helper();

// #l·ªói
// console.log(acc1.#movements);
// console.log(acc1.#pin);
// console.log(acc1.#approveLoan(100));

// Chaining methods;
acc1.deposit(300).deposit(500).withdraw(35).requestLoan(25000).withdraw(4000);
console.log(acc1.getMovements());
